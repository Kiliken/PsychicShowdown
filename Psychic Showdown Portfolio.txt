Psychic Showdown Portfolio

- An overview of the programming part briefly explaining the client and server sides including the development tools used.

- Explanation on the client side including explanations about the player, throwable objects and the game system. Explanations of how the objects are composed, what scripts are included and how they interact with each other, technical highlights (code snippets) will be included.
Objects included in explanation:
	- Player/Camera (Player dash, camera movement)
	- NET Player (Net player animations)
	- Throwable Objects

- Explanation on the server side including how the server is set up and how the data communication is done.
--------------------------------

This game is made using Unity 2022.3.56. During the early stages of the development before the server implementation, the game was first implemented as a split-screen game. However, since this is an online game, the programming side of the game consists of a client side which is the base game system, and a server side which handles data communication between the two players.

--------------------------------

CLIENT SIDE
The client side is the base game system which involves the implementation of the core gameplay mechanics. Among them, I would like to focus on the two most important parts; the players and the throwable items.
--------------------------------

PLAYER
This is the character that the client-side player controls. The Player functions through a number of scripts interacting with one another attached to it. The camera, an object separate to the Player, follows the player around in the game and has its own class. 

Player Object
Player.cs : Contains basic information (HP, Player No., etc.) and handles functions for detecting, grabbing and throwing objects.
PlayerMovement.cs : Handles the movement (walk, sprint, jump, dash) for the player and performs collision checks.
ObjHolder.cs : Updates the positions of the items being held by the player and changes their holding positions when necessary.
PlayerSFXPlayer.cs : Plays the SE for the player.
ControlManager.cs : Sets the control scheme (Xbox or PlayStation) for the player.

Camera Object
CameraController.cs : A robust controller script that makes the camera follow the player in a third-person perspective.  

Technical Highlights

Dashing Ability (PlayerMovement.cs)
The dash coroutine not only moves the player to a position at high speed, but also makes sure that the player does not clip through the wall or the ground by doing raycast checks. If something is in the way of the dashing path, the coroutine makes sure that the player only moves to the point of collision and not beyond it. During the dash, the hurtbox of the player is disabled so that they would not take damage.

[INSERT CODE SNIPPET]

Camera Controller (CameraController.cs)
Instead of using something like Unity's Cinemachine, the camera script is written from scratch. The camera is similar to the ones in third-person shooters today and feels smooth to control. The distance, offset distance, angular rotation limit, rotation speed, axis inversion and shoulder swap can all be adjusted through the editor. Here is the Update function of the script.

[INSERT CODE SNIPPET]

--------------------------------

NET PLAYER
This is the character that the opponent player is controlling through the server. Unlike the client-sided Player, the Net Player is essentially a "puppet" who acts according to the instructions received from the server. The Net Player does not exist as a separate object. It is originally the Player object which gets turned into a Net Player by NetController.

Player Object (Net Player)
NETPlayer.cs : By receiving data of the opponent player from NetController, performs actions like moving, grabbing and throwing objects.
ObjHolder.cs : Updates the positions of the items being held by the player and changes their holding positions when necessary.
PlayerSFXPlayer.cs : Plays the SE for the player.

NetController Object
NetController.cs : Responsible for sending and receiving data between clients and instructing the Net Player what to do. Depending on which Player No. the client-sided player is (Player 1 or 2), it turns the other Player object into the Net Player and removes unnecessary scripts and components.

Technical Highlights

Net Player Movement (NETPlayer.cs)
The UpdatePosition function moves the Net Player to the position the opponent player has moved to through the data from the server and also sets its facing rotation. In addition, it calculates the direction the Net Player is moving in from its last position and new position, and sets the movement animation.

[INSERT CODE SNIPPET]

--------------------------------

THROWABLE ITEMS
These are the items that the players throw at each other in the game. The items have 3 classes; small, medium and large, each with their own size, damage and movement speeds. In addition, there are variant items which have unique effects. 

Throwable Item Object
ThrowableObject.cs : The base script of the throwable items containing functions for being grabbed and thrown. The attributes like damage, throw speed, position and rotation while being held or shot can be set through the editor. 
ObjHitbox.cs : Responsible for dealing damage to the other player.
ObjSFXPlayer.cs : Responsible for playing SE of the objects.

Throwable Item Object (Variants inheriting from ThrowableObject.cs,)
ThrowableGrenade.cs : Explodes and deals damage after being thrown.
ThrowableSpear.cs : Splits itself into multiple copies after being thrown.
ThrowableSkull.cs : Chases the other player after being thrown.
ThrowableMeteor.cs : Spawns a giant meteor from above to the impact point after being thrown.
ThrowableFlan.cs : Launches the players high up in the air when they jump onto it.


### Overview

This game was developed using **Unity 2022.3.56**. In the early stages of development—before server implementation—the game was first designed as a split-screen local multiplayer. However, since the final product is an **online multiplayer game**, the programming architecture consists of two sides:

* **Client Side** – the base game system and local player logic
* **Server Side** – handles data communication between the two players

---

### CLIENT SIDE

The client side handles the core gameplay systems. This includes the implementation of fundamental mechanics like player control and item interaction. Two major components are:

* The **Player** (the controllable character)
* The **Throwable Items** (interactable weapons)

---

### PLAYER

This is the character controlled by the local (client-side) player. The Player GameObject consists of multiple scripts that work together. The **Camera**, although separate from the Player object, follows it and has its own logic.

#### Player Object

* **Player.cs**
  Manages basic information (e.g., HP, Player Number) and handles object detection, grabbing, and throwing.

* **PlayerMovement.cs**
  Controls player movement (walking, sprinting, jumping, dashing) and performs collision checks.

* **ObjHolder.cs**
  Updates the position of held items and adjusts holding positions when necessary.

* **PlayerSFXPlayer.cs**
  Plays sound effects related to the player.

* **ControlManager.cs**
  Determines the player's control scheme (e.g., Xbox or PlayStation).

#### Camera Object

* **CameraController.cs**
  A robust third-person camera system that smoothly follows the player.

---

#### 🛠 Technical Highlights

**Dashing Mechanic** (*PlayerMovement.cs*)
The dash coroutine moves the player rapidly while performing raycast checks to prevent clipping through walls or terrain. If an obstacle is detected, the player will only dash up to the point of collision. During the dash, the player's hurtbox is disabled to prevent damage.

```csharp
[INSERT CODE SNIPPET]
```

**Custom Camera Controller** (*CameraController.cs*)
Instead of using Unity's Cinemachine, this camera system is built from scratch. It provides a modern third-person shooter feel, with adjustable settings (distance, offset, rotation limits, inversion, shoulder swap, etc.) all tweakable via the Unity Inspector.

```csharp
[INSERT CODE SNIPPET]
```

---

### NET PLAYER

This is the character controlled by the opponent through the server. Unlike the client-side Player, the Net Player is essentially a **"puppet"** that acts based on server commands. It is not a separate object but is converted from a regular Player object by the **NetController**.

#### Net Player Scripts

* **NETPlayer.cs**
  Receives opponent data from the NetController and performs corresponding actions like movement, grabbing, and throwing.

* **ObjHolder.cs**
  Same function as on the client side – manages held object positions.

* **PlayerSFXPlayer.cs**
  Plays sound effects for the Net Player.

#### NetController Object

* **NetController.cs**
  Handles all data exchange between clients. Based on the player's ID (Player 1 or 2), it turns the opposing Player object into a Net Player, removing unnecessary scripts/components.

---

#### 🛠 Technical Highlights

**Net Player Movement** (*NETPlayer.cs*)
The `UpdatePosition()` method moves the Net Player to the location received from the server and updates its facing direction. It also calculates movement direction based on position deltas and updates the appropriate animation state.

```csharp
[INSERT CODE SNIPPET]
```

---

### THROWABLE ITEMS

These are objects players throw at each other. They are divided into three classes: **small**, **medium**, and **large**, each differing in size, damage, and speed. Some items are **variants** with special effects.

#### Base Throwable Object

* **ThrowableObject.cs**
  Core script managing the grabbing and throwing mechanics. Attributes like damage, throw speed, held position/rotation can be adjusted in the Inspector.

* **ObjHitbox.cs**
  Handles collision and damage to opponents.

* **ObjSFXPlayer.cs**
  Manages sound effects for items.

#### Variant Objects (inherit from `ThrowableObject.cs`)

* **ThrowableGrenade.cs**
  Explodes after being thrown and deals area damage.

* **ThrowableSpear.cs**
  Splits into multiple copies after being thrown.

* **ThrowableSkull.cs**
  Homes in on the opponent after being thrown.

* **ThrowableMeteor.cs**
  Summons a giant meteor that crashes at the impact location.

* **ThrowableFlan.cs**
  Launches players high into the air when jumped on.

---

## 🇯🇵 Japanese Translation（日本語版）

---

### 概要

このゲームは **Unity 2022.3.56** を使用して開発されました。開発初期段階では、サーバー実装前にローカルマルチプレイのスプリットスクリーン形式で構築されていました。しかし、最終的には**オンライン対戦型ゲーム**として完成させるため、プログラム構成は以下の2つに分かれています：

* **クライアント側**：基本的なゲームシステムおよびローカルプレイヤーの処理
* **サーバー側**：2人のプレイヤー間のデータ通信を処理

---

### クライアント側

クライアント側では、ゲームプレイのコアとなるシステムが処理されます。主に以下の2つのコンポーネントに焦点を当てています：

* **プレイヤーキャラクター**（操作可能なキャラクター）
* **投擲アイテム**（投げ合う武器）

---

### プレイヤー

これはクライアント側のプレイヤーが操作するキャラクターです。複数のスクリプトによって構成され、それぞれが連携しています。**カメラ**はプレイヤーとは別のオブジェクトとして存在し、プレイヤーを追従するように動作します。

#### プレイヤーオブジェクト

* **Player.cs**
  HPやプレイヤー番号などの基本情報を管理し、オブジェクトの検出・掴み・投げ処理を行います。

* **PlayerMovement.cs**
  移動（歩き、ダッシュ、ジャンプ、突進）を制御し、コリジョンチェックも実行します。

* **ObjHolder.cs**
  持っているアイテムの位置を更新し、必要に応じて持ち方を変更します。

* **PlayerSFXPlayer.cs**
  プレイヤーの効果音（SE）を再生します。

* **ControlManager.cs**
  Xbox または PlayStation のコントローラ設定を適用します。

#### カメラオブジェクト

* **CameraController.cs**
  プレイヤーを追従する三人称視点のカメラ制御スクリプトです。

---

#### 🛠 技術的ハイライト

**ダッシュ機能**（*PlayerMovement.cs*）
ダッシュ処理は、プレイヤーを高速で移動させるだけでなく、レイキャストによって壁や地面をすり抜けないよう制御しています。障害物がある場合は、衝突ポイントまでしか移動しません。ダッシュ中はヒットボックスが無効化され、ダメージを受けない仕様です。

```csharp
[INSERT CODE SNIPPET]
```

**カスタムカメラ制御**（*CameraController.cs*）
UnityのCinemachineを使わず、独自に設計されたカメラシステムです。現代的な三人称シューティングゲームのような操作感を実現しています。距離、オフセット、回転制限、回転速度、反転、ショルダースワップなど、エディタから調整可能です。

```csharp
[INSERT CODE SNIPPET]
```

---

### ネットプレイヤー

これは、サーバー経由で相手プレイヤーが操作しているキャラクターです。クライアント側のプレイヤーとは異なり、\*\*「操り人形」\*\*として動作し、サーバーからの指示に従って動きます。専用のオブジェクトではなく、**NetController** によって既存の Player オブジェクトが変換されます。

#### ネットプレイヤー用スクリプト

* **NETPlayer.cs**
  NetController から受け取ったデータを元に、移動・掴み・投げのアクションを実行します。

* **ObjHolder.cs**
  アイテムの位置管理を担当します（クライアント側と同様）。

* **PlayerSFXPlayer.cs**
  効果音を再生します。

#### NetController オブジェクト

NetController オブジェクト

NetController.cs
クライアント間のデータ送受信を管理し、相手プレイヤーのオブジェクトを「ネットプレイヤー」に変換します。プレイヤー番号（Player 1 または Player 2）に応じて、相手の Player オブジェクトから不要なスクリプトやコンポーネントを削除します。

🛠 技術的ハイライト

ネットプレイヤーの移動処理（NETPlayer.cs）
UpdatePosition() 関数は、サーバーから受け取った位置情報を使ってネットプレイヤーを移動させ、向きを更新します。さらに、前回位置と現在位置の差分から移動方向を計算し、アニメーションステートを切り替えます。

[INSERT CODE SNIPPET]

投擲アイテム

このゲームでは、プレイヤーが互いに投げ合うことができるオブジェクトが存在します。投擲アイテムは以下の3つのカテゴリに分類され、それぞれサイズ・ダメージ・速度が異なります：

小型

中型

大型

さらに、特別な効果を持つ「バリアント（派生）アイテム」も用意されています。

投擲アイテムの基本オブジェクト

ThrowableObject.cs
掴む、投げるといった基本機能を持つベーススクリプトです。ダメージ、投擲速度、保持時の位置・回転などはインスペクターで設定可能です。

ObjHitbox.cs
相手プレイヤーに対してダメージを与える当たり判定処理を行います。

ObjSFXPlayer.cs
アイテムの効果音（SE）を再生します。

バリアントアイテム（ThrowableObject.cs を継承）

ThrowableGrenade.cs
投げた後に爆発し、範囲ダメージを与えます。

ThrowableSpear.cs
投げた後に複数のコピーに分裂します。

ThrowableSkull.cs
相手プレイヤーを自動で追尾します。

ThrowableMeteor.cs
落下地点に巨大な隕石を召喚して落下させます。

ThrowableFlan.cs
プレイヤーがジャンプすると高く飛ばされるギミックアイテムです。








